{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["comicApp","apiUrl","axios","require","default","method","url","responseType","params","reqUrl","proxyHeaders","xmlToJson","then","response","console","log","data","displayDefaultComic","fetch","json","currentNumber","num","comicTitle","title","currComic","img","comicAlt","alt","document","querySelector","innerText","innerHTML","mainEl","currImg","createElement","src","appendChild","handleNext","changeComic","handlePrevious","init","getDefault","App","className","onClick","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"oOAIMA,EAAW,CAGjBA,QAAmB,0CAKnBA,WAAsB,WAEpB,IAEMC,EAAS,gCAGZC,EALWC,EAAQ,IAASC,SAKtB,CACFC,OAAO,MACNC,IAJI,6DAKLC,aAAa,OACbC,OAAO,CACHC,OAAOR,EACPS,aAAa,CACT,cAAgB,SAEpBC,WAAU,KAGjBC,MAAK,SAACC,GACJC,QAAQC,IAAIF,EAASG,MACrBhB,EAASiB,oBAAoBJ,EAASG,SAI5CE,MAAMjB,GACHW,MAAK,SAACC,GACLA,EAASM,UACRP,MAAK,SAACI,GACPF,QAAQC,IAAIC,GACZhB,EAASiB,oBAAoBD,GAC7BhB,EAASoB,cAAgBJ,EAAKK,QAIpCrB,YAAuB,WAErBc,QAAQC,IAAI,eAiBdf,oBAA+B,SAACgB,GAE9B,IAAMM,EAAaN,EAAKO,MAClBC,EAAYR,EAAKS,IACjBC,EAAWV,EAAKW,IAMNC,SAASC,cAAc,MAC7BC,UAAYR,EAGJM,SAASC,cAAc,QAC/BE,UAAW,GAErB,IAAMC,EAASJ,SAASC,cAAc,QAEhCI,EAAUL,SAASM,cAAc,OACvCD,EAAQE,IAAMX,EACdS,EAAQN,IAAMD,EAEdZ,QAAQC,IAAI,kCAAkCkB,GAoB9CD,EAAOI,YAAYH,KAMfI,EAAa,WAEjBrC,EAASoB,cAAgBpB,EAASoB,cAAgB,EAClDpB,EAASsC,eAILC,EAAiB,WAGrBvC,EAASoB,cAAgBpB,EAASoB,cAAe,EACjDpB,EAASsC,eAKXtC,EAASwC,KAAO,WAEdxC,EAASoB,cAAgB,EACzBpB,EAASyC,cAuBXzC,EAASwC,OAEME,MAtBf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,8CACA,uBACA,yBAGA,oCACE,wBAAQC,QAASL,EAAjB,sBACA,6BACA,wBAAQK,QAASP,EAAjB,qBAEF,iCACE,mBAAGQ,KAAK,gCAAR,mCC3IOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBpC,MAAK,YAAkD,IAA/CqC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF5B,SAAS6B,eAAe,SAM1BX,M","file":"static/js/main.ebbbdf1d.chunk.js","sourcesContent":["import axios from 'axios';\nimport './App.css';\n\n// creating namespace\nconst comicApp = {};\n\n// storing the API key and base URL\ncomicApp.baseUrl = 'http://localhost:8010/proxy/info.0.json';\n\n//import the useEffect Hook from the React library\n//import { useEffect, useState } from 'react';\n\ncomicApp.getDefault = () =>{\n\n  const axios = require('axios').default;\n  \n  const apiUrl = 'https://xkcd.com/info.0.json';\n  const url = \"https://proxy.junocollege.com/https://xkcd.com/info.0.json\";\n\n     axios({\n         method:'GET',\n          url: url,\n         responseType:'json',\n         params:{\n             reqUrl:apiUrl,\n             proxyHeaders:{\n                 'header_params':'value'\n             },\n             xmlToJson:false\n         }\n     })\n     .then((response) => {\n        console.log(response.data);\n        comicApp.displayDefaultComic(response.data);\n     })\n\n\n  fetch(apiUrl)\n    .then((response) => {\n      response.json();\n    }).then((data) => {\n      console.log(data);\n      comicApp.displayDefaultComic(data);\n      comicApp.currentNumber = data.num;\n    })\n}\n\ncomicApp.changeComic = () => {\n  //fetch the API at the new location of index\n  console.log(\"not yet...\");\n//   fetch(`https://xkcd.com/${comicApp.currentNumber}/info.0.json`)\n  \n//     .then((response) => {\n//       return response.json();\n//     }).then((data) => {\n\n\n//       console.log(data.num);\n//       comicApp.displayDefaultComic(data);\n//       comicApp.currentNumber = data.num;\n//     })\n\n\n}\n\n//Takes the data from the API Call to populate the empty HTML elements in App\ncomicApp.displayDefaultComic = (data) => {\n\n  const comicTitle = data.title;\n  const currComic = data.img;\n  const comicAlt = data.alt;\n  //const comicNum = data.num;\n\n  \n\n  //Title changer\n  let currTitle = document.querySelector('h2');\n  currTitle.innerText = comicTitle;\n  \n  //Quick way to empty the main contaier to \"reset\" the page\n  const mainEmpty = document.querySelector('main');\n  mainEmpty.innerHTML =\"\";\n  \n  const mainEl = document.querySelector('main');\n\n  const currImg = document.createElement('img');\n  currImg.src = currComic;\n  currImg.alt = comicAlt;\n\n  console.log(\"!!!!! THE CURRENT IMG SRC IS : \",currImg), \" !!!!!!!!!!\";\n\n\n  // VVV Currently doesnt work, tells me that currNum.innerText is null after emptying the main elementnst currNum = document.querySelector(\"textarea\");\n    //Tried to switch the type of element to a div instead of a textarea\n\n  // const currNum = document.querySelector(\"textarea\");\n  // if(currNum){\n  //   console.log(\"Works!\");\n  // }\n  // else{\n  //   console.log(\"Nope!\");\n  // }\n\n  // currNum.innerText = comicNum;\n\n  // console.log(currNum);\n  // mainEl.appendChild(currNum);\n\n\n  mainEl.appendChild(currImg);\n}\n\n// EVENT HANDLERS\n// the next and previous buttons need the data passed in or at the very least the comics current number\n//The next button handler \nconst handleNext = function () {\n  //steps to run when event is \"heard\"\n  comicApp.currentNumber = comicApp.currentNumber + 1;\n  comicApp.changeComic();\n\n}\n//The previous button handler \nconst handlePrevious = function () {\n  //steps to run when event is \"heard\"\n  //change the currentNumber value to be one lower than the previous call\n  comicApp.currentNumber = comicApp.currentNumber -1;\n  comicApp.changeComic();\n\n \n}\n// initialize the comicApp\ncomicApp.init = () => {\n  //current number initialized to be replaced with the first API call (Maybe not needed)\n  comicApp.currentNumber = 0;\n  comicApp.getDefault();\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Comic Viewer</h1>\n      <h2></h2>\n      <main></main>\n\n      {/* Area for the comic number to appear */}\n      <section>\n        <button onClick={handlePrevious}>Previous</button>\n        <textarea></textarea>\n        <button onClick={handleNext} >Next</button>\n      </section>\n      <footer>\n        <a href=\"https://xkcd.com/license.html\">Copyright Info </a>\n        </footer>\n    </div>\n  );\n}\n\ncomicApp.init();\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}